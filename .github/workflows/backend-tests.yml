# IN GITHUB ACTIONS, ALSO NEED TO ADD GITHUB RUNNER SO THAT WHEN PUSHES ARE MADE TO THE REPO, IT AUTOMATICALY UPDATES THE BACKEND CODE AND STARTS UP AGAIN
# LETS DO IT LOCAL WAY, AND KEEP EC2 way commented out
# name: Deploy to Local Machine

# on:
#   push:
#     branches: [ "master" ]

# jobs:
#   deploy:
#     runs-on: self-hosted

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Build and run Docker container
#       run: |
#         docker compose down
#         docker compose build
#         docker compose up -d


# # name: Deploy to EC2

# # on:
# #   push:
# #     branches: [ "master" ]

# # jobs:
# #   deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #     - name: Checkout code
# #       uses: actions/checkout@v4

# #     - name: Set up SSH
# #       uses: webfactory/ssh-agent@v0.5.4
# #       with:
# #         ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

# #     - name: Copy files to EC2
# #       run: |
# #         scp -o StrictHostKeyChecking=no -r * ubuntu@api.azlon.org:~/app/

# #     - name: Run deployment script on EC2
# #       run: |
# #         ssh -o StrictHostKeyChecking=no ubuntu@api.azlon.org << 'EOF'
# #         source ~/dev/venv/bin/activate
# #         pip install -r ~/app/requirements.txt
# #         pkill gunicorn
# #         pkill uvicorn
# #         cd ~/app
# #         gunicorn -w 2 -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:8000 --daemon

name: Backend Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      minio:
        image: minio/minio
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minio_test_user
          MINIO_ROOT_PASSWORD: minio_test_password
        options: >-
          --name=minio
          --health-cmd="curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --entrypoint sh
        volumes:
          - /tmp/data:/data
        # Start MinIO server
        command: -c "mkdir -p /data && minio server /data --console-address ':9001'"

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      working-directory: backend
      run: poetry install --no-interaction

    - name: Lint with autoflake, black, and isort
      working-directory: backend
      run: |
        poetry run autoflake --check --remove-all-unused-imports --remove-unused-variables --recursive src tests
        poetry run black --check src tests
        poetry run isort --check-only src tests

    - name: Type check with mypy
      working-directory: backend
      run: poetry run mypy src

    - name: Test with pytest
      working-directory: backend
      env:
        MINIO_ENDPOINT: localhost:9000
        MINIO_ROOT_USER: minio_test_user
        MINIO_ROOT_PASSWORD: minio_test_password
        MINIO_USE_SSL: "false"
        E2B_API_KEY: "dummy_api_key_for_tests"
        BUCKET_NAME: "test-bucket"
      run: poetry run pytest -xvs tests/

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage/
        fail_ci_if_error: false
