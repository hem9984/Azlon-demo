###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generate_code.baml": "class FileItem {\n  filename string @description(\"Name of the file to generate\")\n  content string @description(#\"\n    Content of the file\n    Use triplequote strings to prevent escape characters\n    '''\n    [Code]\n    '''\n  \"#)\n}\n\nclass GenerateCodeInput {\n  /// The user's coding request\n  userPrompt string\n  /// The result of the preflight check\n  preflight_result PreFlightOutput? \n  /// Test conditions the code must meet\n  testConditions string\n}\n\nclass GenerateCodeOutput {\n  dockerfile string @description(#\"\n    Docker configuration for running the code\n    Use triplequote strings to prevent escape characters\n    '''\n    [Code]\n    '''\n  \"#)\n  files FileItem[] @description(\"List of files to generate\")\n}\n\n\nclass PreFlightOutput {\n    dir_tree string\n    run_output string\n}\n\n\ntemplate_string PrintPreFlight(pre: PreFlightOutput?) #\"\n    {% if pre %}\n    Directory tree:\n    {{ pre.dir_tree }}\n    Run output:\n    {{ pre.run_output }}\n    {% endif %}\n\"#\n\nfunction GenerateCode(input: GenerateCodeInput, systemprompt: string?) -> GenerateCodeOutput {\n  client CustomGPT4o\n  prompt #\"\n    {% if systemprompt %}\n    {{ systemprompt }}\n    {% else %}\n    You are an autonomous coding agent. Generate complete code that will run.\n\n    Given the following requirements:\n    - Start with a readme.md containing a summary and step-by-step plan\n    - Use python:3.10-slim as base Docker image\n    - Install necessary dependencies in Dockerfile\n    - Each file should start with #./<filename>\n    - Dockerfile should define ENTRYPOINT to run automatically\n    - Output must be visible on stdout without intervention\n    - Files should be ordered: readme.md, config files, main application files\n    {% endif %}\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} User Request:\n    {{ input.userPrompt }}\n\n    Test Conditions:\n    {{ input.testConditions }}\n\n    {{ PrintPreFlight(input.preflight_result) }}\n  \"#\n}\n\ntest GenerateSimpleScript {\n  functions [GenerateCode]\n  args {\n    input {\n      userPrompt \"Create a hello world script\"\n      testConditions \"Script should print 'Hello, World!' to stdout\"\n    }\n  }\n}\n\ntest GenerateComplexProject {\n  functions [GenerateCode]\n  args {\n    input {\n      userPrompt \"Create a Flask API with a single endpoint that returns the current time\"\n      testConditions \"API should respond to GET / with current timestamp in ISO format\"\n    }\n  }\n}\n\ntest tacos {\n  functions [GenerateCode]\n  args {\n    input {\n      userPrompt \"instead of code, lets talk about chess\"\n      testConditions \"who is the best player of all time?\"\n    }\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.73.5\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return file_map